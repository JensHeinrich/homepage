.. highlight:: sh

``make`` Without Makefile
=========================

Whenever you encounter a directory with a file called ``Makefile`` in it, you
know you can run ``make`` to automatically compile/generate/do whatever is
specified in the ``Makefile``.

But you don't even need such a file. You can also use ``make`` all by itself.
To show an example for that, let's create a file called
:download:`hello.cpp` with the
following content:

.. literalinclude:: hello.cpp
   :language: c++

Now we can simply run ... ::

  make hello

... and it will magically be compiled (if you have ``make`` and a C++ compiler
installed).

.. note::

  You can ignore the details for now, but if you are curious, this is the exact
  command that will be called by `make`::

    g++     hello.cpp   -o hello

  That means the C++ compiler is compiling (and linking) the source file
  :download:`hello.cpp` to produce an executable file called ``hello`` (which
  you can run with ``./hello`` by the way).
  The command is generated by the *implicit rule*
 
  .. literalinclude:: Makefile.implicit_cpp

  You can find out about all the rules that ``make`` considers with the command
  ``make -p``, but more about that later.

A Simple Makefile
-----------------

The command ``make hello`` was pretty simple, wasn't it? But we can make it even
simpler, but for that we first have to create a ``Makefile`` to specify all the
necessary details.
The most important things to write in there, are so-called *rules*. Those
consist of *targets*, *dependencies* and *commands*.

Let's create a file called :download:`Makefile` with the following content:

.. literalinclude:: Makefile

That's it. Nothing more. Only one line. Only 6 characters.

This is a rule which contains only a *target*, i.e. the thing we want to get in
the end. In our example that's an executable named ``hello``. There are no
*dependencies* and no *commands*. When ``make`` is called without specifying a
target (like we did before with ``make hello``), ``make`` chooses the first
target it encounters in the ``Makefile``, which is in our case -- what a
coincidence! -- ``hello``. With our brand-new :download:`Makefile` in place, we
can now simply call::

  make

... and it will do the same thing as before.

From now on, we will make our ``Makefile`` more and more elaborate and add many
features, but the call to ``make`` will mostly stay that simple. That's the
beauty of it.

.. vim:textwidth=80
